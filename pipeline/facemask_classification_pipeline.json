{
  "pipelineSpec": {
    "components": {
      "comp-condition-deploy-model-3": {
        "dag": {
          "tasks": {
            "endpoint-create": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-endpoint-create"
              },
              "inputs": {
                "parameters": {
                  "description": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "display_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "pipelines-created-endpoint"
                      }
                    }
                  },
                  "encryption_spec_key_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--region"
                  },
                  "network": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  }
                }
              },
              "taskInfo": {
                "name": "endpoint-create"
              }
            },
            "importer": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-importer"
              },
              "inputs": {
                "parameters": {
                  "uri": {
                    "componentInputParameter": "pipelineparam--artifact_uri"
                  }
                }
              },
              "taskInfo": {
                "name": "importer"
              }
            },
            "model-deploy": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-deploy"
              },
              "dependentTasks": [
                "endpoint-create",
                "model-upload"
              ],
              "inputs": {
                "artifacts": {
                  "endpoint": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "endpoint",
                      "producerTask": "endpoint-create"
                    }
                  },
                  "model": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "model",
                      "producerTask": "model-upload"
                    }
                  }
                },
                "parameters": {
                  "automatic_resources_max_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "automatic_resources_min_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "dedicated_resources_accelerator_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "dedicated_resources_accelerator_type": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "NVIDIA_TESLA_K80"
                      }
                    }
                  },
                  "dedicated_resources_machine_type": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "n1-standard-4"
                      }
                    }
                  },
                  "dedicated_resources_max_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "dedicated_resources_min_replica_count": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "1"
                      }
                    }
                  },
                  "deployed_model_display_name": {
                    "componentInputParameter": "pipelineparam--display_name"
                  },
                  "disable_container_logging": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "enable_access_logging": {
                    "runtimeValue": {
                      "constantValue": {
                        "intValue": "0"
                      }
                    }
                  },
                  "explanation_metadata": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "explanation_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "service_account": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "traffic_split": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{\"0\": 100}"
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "model-deploy"
              }
            },
            "model-upload": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-model-upload"
              },
              "dependentTasks": [
                "importer"
              ],
              "inputs": {
                "artifacts": {
                  "unmanaged_container_model": {
                    "taskOutputArtifact": {
                      "outputArtifactKey": "artifact",
                      "producerTask": "importer"
                    }
                  }
                },
                "parameters": {
                  "artifact_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "description": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "display_name": {
                    "componentInputParameter": "pipelineparam--display_name"
                  },
                  "encryption_spec_key_name": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "explanation_metadata": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "explanation_parameters": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "instance_schema_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "labels": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "{}"
                      }
                    }
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--region"
                  },
                  "parameters_schema_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "prediction_schema_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "serving_container_args": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "serving_container_command": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "serving_container_environment_variables": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "serving_container_health_route": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "serving_container_image_uri": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  },
                  "serving_container_ports": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": "[]"
                      }
                    }
                  },
                  "serving_container_predict_route": {
                    "runtimeValue": {
                      "constantValue": {
                        "stringValue": ""
                      }
                    }
                  }
                }
              },
              "taskInfo": {
                "name": "model-upload"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--artifact_uri": {
              "type": "STRING"
            },
            "pipelineparam--display_name": {
              "type": "STRING"
            },
            "pipelineparam--performancethresholdop-Output": {
              "type": "STRING"
            },
            "pipelineparam--project": {
              "type": "STRING"
            },
            "pipelineparam--region": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-condition-train-model-2": {
        "dag": {
          "tasks": {
            "customcontainertrainingjob-run": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-customcontainertrainingjob-run"
              },
              "inputs": {
                "parameters": {
                  "container_uri": {
                    "componentInputParameter": "pipelineparam--container_img_uri"
                  },
                  "display_name": {
                    "componentInputParameter": "pipelineparam--display_name"
                  },
                  "location": {
                    "componentInputParameter": "pipelineparam--region"
                  },
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "staging_bucket": {
                    "componentInputParameter": "pipelineparam--bucket"
                  }
                }
              },
              "taskInfo": {
                "name": "customcontainertrainingjob-run"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--bucket": {
              "type": "STRING"
            },
            "pipelineparam--container_img_uri": {
              "type": "STRING"
            },
            "pipelineparam--datavalidationop-Output": {
              "type": "STRING"
            },
            "pipelineparam--display_name": {
              "type": "STRING"
            },
            "pipelineparam--project": {
              "type": "STRING"
            },
            "pipelineparam--region": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-customcontainertrainingjob-run": {
        "executorLabel": "exec-customcontainertrainingjob-run",
        "inputDefinitions": {
          "parameters": {
            "container_uri": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "staging_bucket": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-datavalidationop": {
        "executorLabel": "exec-datavalidationop",
        "inputDefinitions": {
          "parameters": {
            "bucket_name": {
              "type": "STRING"
            },
            "divergence_threshold": {
              "type": "DOUBLE"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-endpoint-create": {
        "executorLabel": "exec-endpoint-create",
        "inputDefinitions": {
          "parameters": {
            "description": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "network": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "google.VertexEndpoint",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-exit-handler-1": {
        "dag": {
          "tasks": {
            "condition-deploy-model-3": {
              "componentRef": {
                "name": "comp-condition-deploy-model-3"
              },
              "dependentTasks": [
                "performancethresholdop"
              ],
              "inputs": {
                "parameters": {
                  "pipelineparam--artifact_uri": {
                    "componentInputParameter": "pipelineparam--artifact_uri"
                  },
                  "pipelineparam--display_name": {
                    "componentInputParameter": "pipelineparam--display_name"
                  },
                  "pipelineparam--performancethresholdop-Output": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "performancethresholdop"
                    }
                  },
                  "pipelineparam--project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "pipelineparam--region": {
                    "componentInputParameter": "pipelineparam--region"
                  }
                }
              },
              "taskInfo": {
                "name": "condition-deploy-model-3"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--performancethresholdop-Output'].string_value == 'pass'"
              }
            },
            "condition-train-model-2": {
              "componentRef": {
                "name": "comp-condition-train-model-2"
              },
              "dependentTasks": [
                "datavalidationop"
              ],
              "inputs": {
                "parameters": {
                  "pipelineparam--bucket": {
                    "componentInputParameter": "pipelineparam--bucket"
                  },
                  "pipelineparam--container_img_uri": {
                    "componentInputParameter": "pipelineparam--container_img_uri"
                  },
                  "pipelineparam--datavalidationop-Output": {
                    "taskOutputParameter": {
                      "outputParameterKey": "Output",
                      "producerTask": "datavalidationop"
                    }
                  },
                  "pipelineparam--display_name": {
                    "componentInputParameter": "pipelineparam--display_name"
                  },
                  "pipelineparam--project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "pipelineparam--region": {
                    "componentInputParameter": "pipelineparam--region"
                  }
                }
              },
              "taskInfo": {
                "name": "condition-train-model-2"
              },
              "triggerPolicy": {
                "condition": "inputs.parameters['pipelineparam--datavalidationop-Output'].string_value == 'pass'"
              }
            },
            "datavalidationop": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-datavalidationop"
              },
              "inputs": {
                "parameters": {
                  "bucket_name": {
                    "componentInputParameter": "pipelineparam--bucket_name"
                  },
                  "divergence_threshold": {
                    "componentInputParameter": "pipelineparam--divergence_threshold"
                  }
                }
              },
              "taskInfo": {
                "name": "datavalidationop"
              }
            },
            "performancethresholdop": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-performancethresholdop"
              },
              "dependentTasks": [
                "condition-train-model-2"
              ],
              "inputs": {
                "parameters": {
                  "f1_threshold": {
                    "componentInputParameter": "pipelineparam--eval_threshold"
                  },
                  "json_url": {
                    "componentInputParameter": "pipelineparam--model_perf_uri"
                  }
                }
              },
              "taskInfo": {
                "name": "performancethresholdop"
              }
            }
          }
        },
        "inputDefinitions": {
          "parameters": {
            "pipelineparam--artifact_uri": {
              "type": "STRING"
            },
            "pipelineparam--bucket": {
              "type": "STRING"
            },
            "pipelineparam--bucket_name": {
              "type": "STRING"
            },
            "pipelineparam--container_img_uri": {
              "type": "STRING"
            },
            "pipelineparam--display_name": {
              "type": "STRING"
            },
            "pipelineparam--divergence_threshold": {
              "type": "DOUBLE"
            },
            "pipelineparam--eval_threshold": {
              "type": "DOUBLE"
            },
            "pipelineparam--model_perf_uri": {
              "type": "STRING"
            },
            "pipelineparam--project": {
              "type": "STRING"
            },
            "pipelineparam--region": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-importer": {
        "executorLabel": "exec-importer",
        "inputDefinitions": {
          "parameters": {
            "uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "artifact": {
              "artifactType": {
                "schemaTitle": "google.UnmanagedContainerModel",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-model-deploy": {
        "executorLabel": "exec-model-deploy",
        "inputDefinitions": {
          "artifacts": {
            "endpoint": {
              "artifactType": {
                "schemaTitle": "google.VertexEndpoint",
                "schemaVersion": "0.0.1"
              }
            },
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "automatic_resources_max_replica_count": {
              "type": "INT"
            },
            "automatic_resources_min_replica_count": {
              "type": "INT"
            },
            "dedicated_resources_accelerator_count": {
              "type": "INT"
            },
            "dedicated_resources_accelerator_type": {
              "type": "STRING"
            },
            "dedicated_resources_machine_type": {
              "type": "STRING"
            },
            "dedicated_resources_max_replica_count": {
              "type": "INT"
            },
            "dedicated_resources_min_replica_count": {
              "type": "INT"
            },
            "deployed_model_display_name": {
              "type": "STRING"
            },
            "disable_container_logging": {
              "type": "STRING"
            },
            "enable_access_logging": {
              "type": "STRING"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "service_account": {
              "type": "STRING"
            },
            "traffic_split": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-model-upload": {
        "executorLabel": "exec-model-upload",
        "inputDefinitions": {
          "artifacts": {
            "unmanaged_container_model": {
              "artifactType": {
                "schemaTitle": "google.UnmanagedContainerModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "artifact_uri": {
              "type": "STRING"
            },
            "description": {
              "type": "STRING"
            },
            "display_name": {
              "type": "STRING"
            },
            "encryption_spec_key_name": {
              "type": "STRING"
            },
            "explanation_metadata": {
              "type": "STRING"
            },
            "explanation_parameters": {
              "type": "STRING"
            },
            "instance_schema_uri": {
              "type": "STRING"
            },
            "labels": {
              "type": "STRING"
            },
            "location": {
              "type": "STRING"
            },
            "parameters_schema_uri": {
              "type": "STRING"
            },
            "prediction_schema_uri": {
              "type": "STRING"
            },
            "project": {
              "type": "STRING"
            },
            "serving_container_args": {
              "type": "STRING"
            },
            "serving_container_command": {
              "type": "STRING"
            },
            "serving_container_environment_variables": {
              "type": "STRING"
            },
            "serving_container_health_route": {
              "type": "STRING"
            },
            "serving_container_image_uri": {
              "type": "STRING"
            },
            "serving_container_ports": {
              "type": "STRING"
            },
            "serving_container_predict_route": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "google.VertexModel",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "gcp_resources": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-performancethresholdop": {
        "executorLabel": "exec-performancethresholdop",
        "inputDefinitions": {
          "parameters": {
            "f1_threshold": {
              "type": "DOUBLE"
            },
            "json_url": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-vertex-pipelines-notification-email": {
        "executorLabel": "exec-vertex-pipelines-notification-email",
        "inputDefinitions": {
          "parameters": {
            "pipeline_task_final_status": {
              "type": "STRING"
            },
            "recipients": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-customcontainertrainingjob-run": {
          "container": {
            "args": [
              "--method.machine_type",
              "n1-standard-4",
              "--method.replica_count",
              "1",
              "--method.accelerator_type",
              "NVIDIA_TESLA_K80",
              "--method.accelerator_count",
              "1",
              "--executor_input",
              "{{$}}",
              "--resource_name_output_artifact_uri",
              "{{$.outputs.artifacts['model'].uri}}",
              "--init.display_name",
              "{{$.inputs.parameters['display_name']}}",
              "--init.container_uri",
              "{{$.inputs.parameters['container_uri']}}",
              "--init.project",
              "{{$.inputs.parameters['project']}}",
              "--init.location",
              "{{$.inputs.parameters['location']}}",
              "--init.staging_bucket",
              "{{$.inputs.parameters['staging_bucket']}}"
            ],
            "command": [
              "python3",
              "-m",
              "google_cloud_pipeline_components.container.aiplatform.remote_runner",
              "--cls_name",
              "CustomContainerTrainingJob",
              "--method_name",
              "run"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.10"
          }
        },
        "exec-datavalidationop": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "DataValidationOp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-storage' 'numpy' 'matplotlib' 'scipy' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef DataValidationOp(\n    bucket_name: str,\n    divergence_threshold: float,\n) -> str:\n    from google.cloud import storage\n    import numpy as np\n    from matplotlib import image\n    from scipy.stats import wasserstein_distance\n\n    def list_blobs(bucket_name):\n        \"\"\"Lists all the blobs in the bucket.\"\"\"\n        # bucket_name = \"your-bucket-name\"\n\n        storage_client = storage.Client()\n\n        # Note: Client.list_blobs requires at least package version 1.17.0.\n        blobs = storage_client.list_blobs(bucket_name)\n\n        files = []\n\n        for blob in blobs:\n            files.append(blob.name)\n\n        return files\n\n    def get_image_brightness(bucket_name, source_blob_name, destination_file_name):\n        \"\"\"Downloads an image from the bucket and get its mean brightness.\"\"\"\n\n        storage_client = storage.Client()\n        bucket = storage_client.bucket(bucket_name)\n        blob = bucket.blob(source_blob_name)\n        blob.download_to_filename(destination_file_name)\n\n        img = image.imread(destination_file_name)\n\n        return np.mean(img)\n\n    files = list_blobs(bucket_name)\n    train_files = [file for file in files if 'FaceMask/Train/' in file and 'Augmented' not in file]\n    val_files = [file for file in files if 'FaceMask/Validation/' in file and 'Augmented' not in file]\n    train_brightness = []\n    val_brightness = []\n\n    for file in train_files:\n        brightness = get_image_brightness(bucket_name, file, './image.png')\n        train_brightness.append(brightness)\n    for file in val_files:\n        brightness = get_image_brightness(bucket_name, file, './image.png')\n        val_brightness.append(brightness)    \n\n    # https://datascience.stackexchange.com/a/54385/73827\n    # wasserstein-1 distance is better than kl-divergence\n    divergence = wasserstein_distance(train_brightness, val_brightness)\n    if divergence > divergence_threshold:\n        return 'fail'\n    else:\n        return 'pass'\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-endpoint-create": {
          "container": {
            "args": [
              "--type",
              "CreateEndpoint",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"{{$.inputs.parameters['description']}}\", \"labels\": {{$.inputs.parameters['labels']}}, \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}, \"network\": \"{{$.inputs.parameters['network']}}\"}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.10"
          }
        },
        "exec-importer": {
          "importer": {
            "artifactUri": {
              "runtimeParameter": "uri"
            },
            "metadata": {
              "containerSpec": {
                "imageUri": "us-docker.pkg.dev/cloud-aiplatform/prediction/tf2-gpu.2-8:latest"
              }
            },
            "typeSchema": {
              "schemaTitle": "google.UnmanagedContainerModel",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "exec-model-deploy": {
          "container": {
            "args": [
              "--type",
              "DeployModel",
              "--payload",
              "{\"endpoint\": \"{{$.inputs.artifacts['endpoint'].metadata['resourceName']}}\", \"traffic_split\": {{$.inputs.parameters['traffic_split']}}, \"deployed_model\": {\"model\": \"{{$.inputs.artifacts['model'].metadata['resourceName']}}\", \"dedicated_resources\": {\"machine_spec\": {\"machine_type\": \"{{$.inputs.parameters['dedicated_resources_machine_type']}}\", \"accelerator_type\": \"{{$.inputs.parameters['dedicated_resources_accelerator_type']}}\", \"accelerator_count\": {{$.inputs.parameters['dedicated_resources_accelerator_count']}}}, \"min_replica_count\": {{$.inputs.parameters['dedicated_resources_min_replica_count']}}, \"max_replica_count\": {{$.inputs.parameters['dedicated_resources_max_replica_count']}}}, \"automatic_resources\": {\"min_replica_count\": {{$.inputs.parameters['automatic_resources_min_replica_count']}}, \"max_replica_count\": {{$.inputs.parameters['automatic_resources_max_replica_count']}}}, \"service_account\": \"{{$.inputs.parameters['service_account']}}\", \"disable_container_logging\": {{$.inputs.parameters['disable_container_logging']}}, \"enable_access_logging\": {{$.inputs.parameters['enable_access_logging']}}, \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}}}",
              "--project",
              "",
              "--location",
              "",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.10"
          }
        },
        "exec-model-upload": {
          "container": {
            "args": [
              "--type",
              "UploadModel",
              "--payload",
              "{\"display_name\": \"{{$.inputs.parameters['display_name']}}\", \"description\": \"{{$.inputs.parameters['description']}}\", \"predict_schemata\": {\"instance_schema_uri\": \"{{$.inputs.parameters['instance_schema_uri']}}\", \"parameters_schema_uri\": \"{{$.inputs.parameters['parameters_schema_uri']}}\", \"prediction_schema_uri\": \"{{$.inputs.parameters['prediction_schema_uri']}}\"}, \"container_spec\": {\"image_uri\": \"{{$.inputs.parameters['serving_container_image_uri']}}\", \"command\": {{$.inputs.parameters['serving_container_command']}}, \"args\": {{$.inputs.parameters['serving_container_args']}}, \"env\": {{$.inputs.parameters['serving_container_environment_variables']}}, \"ports\": {{$.inputs.parameters['serving_container_ports']}}, \"predict_route\": \"{{$.inputs.parameters['serving_container_predict_route']}}\", \"health_route\": \"{{$.inputs.parameters['serving_container_health_route']}}\"}, \"artifact_uri\": \"{{$.inputs.parameters['artifact_uri']}}\", \"explanation_spec\": {\"parameters\": {{$.inputs.parameters['explanation_parameters']}}, \"metadata\": {{$.inputs.parameters['explanation_metadata']}}}, \"encryption_spec\": {\"kms_key_name\":\"{{$.inputs.parameters['encryption_spec_key_name']}}\"}, \"labels\": {{$.inputs.parameters['labels']}}}",
              "--project",
              "{{$.inputs.parameters['project']}}",
              "--location",
              "{{$.inputs.parameters['location']}}",
              "--gcp_resources",
              "{{$.outputs.parameters['gcp_resources'].output_file}}",
              "--executor_input",
              "{{$}}"
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.v1.gcp_launcher.launcher"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.10"
          }
        },
        "exec-performancethresholdop": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "PerformanceThresholdOp"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-storage' 'pandas' 'fsspec' 'gcsfs' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef PerformanceThresholdOp(\n    json_url: str,\n    f1_threshold: float,\n) -> str:\n    import pandas as pd\n\n    results = pd.read_json(json_url, typ='series')\n    if results['FullModel'] >= f1_threshold:\n        return 'pass'\n    else:\n        return 'fail'\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-vertex-pipelines-notification-email": {
          "container": {
            "args": [
              "--type",
              "VertexNotificationEmail",
              "--payload",
              ""
            ],
            "command": [
              "python3",
              "-u",
              "-m",
              "google_cloud_pipeline_components.container.experimental.vertex_notification_email.executor"
            ],
            "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.10"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "face-mask-import-model-v1"
    },
    "root": {
      "dag": {
        "tasks": {
          "exit-handler-1": {
            "componentRef": {
              "name": "comp-exit-handler-1"
            },
            "inputs": {
              "parameters": {
                "pipelineparam--artifact_uri": {
                  "componentInputParameter": "artifact_uri"
                },
                "pipelineparam--bucket": {
                  "componentInputParameter": "bucket"
                },
                "pipelineparam--bucket_name": {
                  "componentInputParameter": "bucket_name"
                },
                "pipelineparam--container_img_uri": {
                  "componentInputParameter": "container_img_uri"
                },
                "pipelineparam--display_name": {
                  "componentInputParameter": "display_name"
                },
                "pipelineparam--divergence_threshold": {
                  "componentInputParameter": "divergence_threshold"
                },
                "pipelineparam--eval_threshold": {
                  "componentInputParameter": "eval_threshold"
                },
                "pipelineparam--model_perf_uri": {
                  "componentInputParameter": "model_perf_uri"
                },
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                },
                "pipelineparam--region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "exit-handler-1"
            }
          },
          "vertex-pipelines-notification-email": {
            "componentRef": {
              "name": "comp-vertex-pipelines-notification-email"
            },
            "dependentTasks": [
              "exit-handler-1"
            ],
            "inputs": {
              "parameters": {
                "pipeline_task_final_status": {
                  "taskFinalStatus": {
                    "producerTask": "exit-handler-1"
                  }
                },
                "recipients": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"hy.lim.2021@mitb.smu.edu.sg\", \"teyang.lau.2021@mitb.smu.edu.sg\", \"sean.goh.2020@mitb.smu.edu.sg\"]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "vertex-pipelines-notification-email"
            },
            "triggerPolicy": {
              "strategy": "ALL_UPSTREAM_TASKS_COMPLETED"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "artifact_uri": {
            "type": "STRING"
          },
          "bucket": {
            "type": "STRING"
          },
          "bucket_name": {
            "type": "STRING"
          },
          "container_img_uri": {
            "type": "STRING"
          },
          "display_name": {
            "type": "STRING"
          },
          "divergence_threshold": {
            "type": "DOUBLE"
          },
          "eval_threshold": {
            "type": "DOUBLE"
          },
          "model_perf_uri": {
            "type": "STRING"
          },
          "project": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.12"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://seangoh-smu-mle-usa/pipeline_root/face-mask"
  }
}